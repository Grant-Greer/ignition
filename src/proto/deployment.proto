syntax = "proto3";
package ignition.deployment;

message DeploymentEnvironmentVariable {
  string name = 1;
  string value = 2;
}

message DeploymentInternalService {
  string name = 1;
  uint32 port = 2;
  enum Protocol {
    HTTP = 0;
    TCP = 1;
  }
  optional Protocol protocol = 3;
}

message DeploymentExternalServiceIngress {
  string host = 1;
  oneof certificate {
    bool auto = 2;
    string manual_cert_name = 3;
  }
}

message DeploymentExternalService {
  string name = 1;
  uint32 port = 2;
  enum Protocol {
    HTTP = 0;
    TCP_TLS = 1;
  }
  optional Protocol protocol = 3;
  enum TlsTermination {
    PASSTHROUGH = 0;
    REENCRYPT = 1;
  }
  optional TlsTermination tls_termination = 4;
  optional DeploymentExternalServiceIngress ingress = 5;
}

message OnDemandSnapshot {
  enum Strategy {
    NONE = 0;
    BOOT = 1;
    NET = 2;
  }
  Strategy strategy = 1;
  optional bool stateful = 2;
}

message DeploymentMode {
  oneof mode {
    bool always_on = 1;
    OnDemandModeConfig on_demand = 2;
  }
}

message OnDemandModeConfig {
  OnDemandSnapshot snapshot = 1;
  optional bool allow_idle_connection = 2;
}

message DeploymentScaling {
  oneof config {
    FixedScaling fixed = 1;
    AutoScaling auto = 2;
  }
}

message FixedScaling {
  uint32 replicas = 1;
}

message AutoScaling {
  uint32 min = 1;
  uint32 max = 2;
}

message DeploymentService {
  oneof service {
    DeploymentInternalService internal = 1;
    DeploymentExternalService external = 2;
  }
}

message Deployment {
  string name = 1;
  string image = 2;
  uint64 memory = 3;
  uint32 vcpus = 4;
  optional DeploymentMode mode = 5;
  optional DeploymentScaling scaling = 6;
  repeated DeploymentEnvironmentVariable environment = 7;
  repeated DeploymentService services = 8;
}

message ApplyConfigRequest {
  Deployment deployment = 1;
}

message ApplyConfigResponse {
  enum Status {
    PENDING = 0;
    ACCEPTED = 1;
    REJECTED = 2;
  }
  Status status = 1;
  optional string message = 2;
}

message GetDeploymentRequest {
  string name = 1;
}

message GetDeploymentResponse {
  Deployment deployment = 1;
}

message DeleteDeploymentRequest {
  string name = 1;
}

message DeleteDeploymentResponse {
  enum Status {
    PENDING = 0;
    ACCEPTED = 1;
    REJECTED = 2;
  }
  Status status = 1;
  optional string message = 2;
}

message ListDeploymentsRequest {
  optional string name = 1;
}

message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
}